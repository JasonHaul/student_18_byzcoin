syntax = "proto2";

option java_package = "ch.epfl.dedis.proto";
option java_outer_classname = "DarcProto";

// ***
// These are the messages used in the API-calls
// ***

// Darc is the basic structure representing an access control. A Darc can evolve in the way that
// a new Darc points to the previous one and is signed by the owner(s) of the previous Darc.
message Darc {
  // 	 Version should be monotonically increasing over the evolution of a Darc.
  required uint64 version = 1;
  // 	 Description is a free-form field that can hold any data as required by the user.
  // 	 Darc itself will never depend on any of the data in here.
  required bytes description = 2;
  // 	 BaseID is the ID of the first darc of this Series
  required bytes baseid = 3;
  // 	 Rules map an action to an expression.
  // An action is a string that should be associated with an expression. The
  // application typically will define the action but there are two actions that
  // are in all the darcs, "_evolve" and "_sign". The application can modify
  // these actions but should not change the semantics of these actions.
  map<string, bytes> rules = 4;
  // 	 Represents the path to get up to information to be able to verify
  // 	 this signature.  These justify the right of the signer to push a new
  // 	 Darc.  These are ordered from the oldest to the newest, i.e.
  // 	 Path[0] should be the base Darc.
  repeated Darc path = 5;
  // 	 PathDigest is the digest of Path, it should be set when Path has
  // 	 length 0.
  required bytes pathdigest = 6;
  // 	 Signature is calculated on the Request-representation of the darc.
  // 	 It needs to be created by identities that have the "_evolve" action
  // 	 from the previous valid Darc.
  repeated Signature signatures = 7;
}

// Identity is a generic structure can be either an Ed25519 public key, a Darc
// or a X509 Identity.
message Identity {
  // 	 Darc identity
  optional IdentityDarc darc = 1;
  // 	 Public-key identity
  optional IdentityEd25519 ed25519 = 2;
  // 	 Public-key identity
  optional IdentityX509EC x509ec = 3;
}

// IdentityEd25519 holds a Ed25519 public key (Point)
message IdentityEd25519 {
  required bytes point = 1;
}

// IdentityX509EC holds a public key from a X509EC
message IdentityX509EC {
  required bytes public = 1;
}

// IdentityDarc is a structure that points to a Darc with a given ID on a
// skipchain. The signer should belong to the Darc.
message IdentityDarc {
  // 	 Signer SignerEd25519
  required bytes id = 1;
}

// Signature is a signature on a Darc to accept a given decision.
// can be verified using the appropriate identity.
message Signature {
  // 	 The signature itself
  required bytes signature = 1;
  // 	 Signer is the Idenity (public key or another Darc) of the signer
  required Identity signer = 2;
}

// Signer is a generic structure that can hold different types of signers
message Signer {
  optional SignerEd25519 ed25519 = 1;
  optional SignerX509EC x509ec = 2;
}

// SignerEd25519 holds a public and private keys necessary to sign Darcs
message SignerEd25519 {
  required bytes point = 1;
  required bytes secret = 2;
}

// SignerX509EC holds a public and private keys necessary to sign Darcs,
// but the private key will not be given out.
message SignerX509EC {
  required bytes point = 1;
  required bytes secret = 2;
}

// Request is the structure that the client must provide to be verified
message Request {
  required bytes baseid = 1;
  required string action = 2;
  required bytes msg = 3;
  repeated Identity identities = 4;
  repeated bytes signatures = 5;
}
